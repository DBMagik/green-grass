@page "/clients/new"
@rendermode InteractiveServer
@using GreenGrass.Models
@using GreenGrass.Services
@inject IClientService ClientService
@inject NavigationManager Navigation

<PageTitle>Add New Client - GreenGrass</PageTitle>

<div class="d-flex justify-content-between align-items-center mb-4">
    <h1>Add New Client</h1>
    <button class="btn btn-outline-secondary" @onclick="@(() => Navigation.NavigateTo("/clients"))">
        <i class="bi bi-arrow-left"></i> Back to Clients
    </button>
</div>

<div class="row">
    <div class="col-md-8">
        <div class="card">
            <div class="card-body">
                <EditForm Model="@_client" OnValidSubmit="@HandleValidSubmit">
                    <DataAnnotationsValidator />
                    <ValidationSummary class="text-danger" />

                    <div class="row mb-3">
                        <div class="col-md-6">
                            <label for="firstName" class="form-label">First Name</label>
                            <InputText id="firstName" class="form-control" @bind-Value="_client.FirstName" />
                            <ValidationMessage For="@(() => _client.FirstName)" />
                        </div>
                        <div class="col-md-6">
                            <label for="lastName" class="form-label">Last Name</label>
                            <InputText id="lastName" class="form-control" @bind-Value="_client.LastName" />
                            <ValidationMessage For="@(() => _client.LastName)" />
                        </div>
                    </div>

                    <div class="row mb-3">
                        <div class="col-md-6">
                            <label for="email" class="form-label">Email</label>
                            <InputText id="email" type="email" class="form-control" @bind-Value="_client.Email" />
                            <ValidationMessage For="@(() => _client.Email)" />
                        </div>
                        <div class="col-md-6">
                            <label for="phone" class="form-label">Phone Number</label>
                            <InputText id="phone" class="form-control" @bind-Value="_client.PhoneNumber" />
                            <ValidationMessage For="@(() => _client.PhoneNumber)" />
                        </div>
                    </div>

                    <h5 class="mb-3">Service Address</h5>
                    
                    <div class="mb-3">
                        <label for="street" class="form-label">Street Address</label>
                        <InputText id="street" class="form-control" @bind-Value="_client.Address.Street" />
                        <ValidationMessage For="@(() => _client.Address.Street)" />
                    </div>

                    <div class="row mb-3">
                        <div class="col-md-4">
                            <label for="city" class="form-label">City</label>
                            <InputText id="city" class="form-control" @bind-Value="_client.Address.City" />
                            <ValidationMessage For="@(() => _client.Address.City)" />
                        </div>
                        <div class="col-md-4">
                            <label for="state" class="form-label">State</label>
                            <InputText id="state" class="form-control" @bind-Value="_client.Address.State" />
                            <ValidationMessage For="@(() => _client.Address.State)" />
                        </div>
                        <div class="col-md-4">
                            <label for="zipCode" class="form-label">ZIP Code</label>
                            <InputText id="zipCode" class="form-control" @bind-Value="_client.Address.ZipCode" />
                            <ValidationMessage For="@(() => _client.Address.ZipCode)" />
                        </div>
                    </div>

                    <div class="d-flex justify-content-end gap-2">
                        <button type="button" class="btn btn-secondary" @onclick="@(() => Navigation.NavigateTo("/clients"))">
                            Cancel
                        </button>
                        <button type="submit" class="btn btn-primary" disabled="@_isSubmitting">
                            @if (_isSubmitting)
                            {
                                <span class="spinner-border spinner-border-sm me-2"></span>
                            }
                            Create Client
                        </button>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
</div>

@code {
    private Client _client = new() { Address = new Address() };
    private bool _isSubmitting = false;
    private string? _errorMessage;

    private async Task HandleValidSubmit()
    {
        _isSubmitting = true;
        _errorMessage = null;
        StateHasChanged();

        try
        {
            await ClientService.CreateClientAsync(_client);
            Navigation.NavigateTo("/clients");
        }
        catch (Exception ex)
        {
            _errorMessage = "Failed to create client. Please try again.";
            Console.WriteLine($"Error creating client: {ex.Message}");
        }
        finally
        {
            _isSubmitting = false;
            StateHasChanged();
        }
    }
}
