@page "/"
@using System.ComponentModel.DataAnnotations
@using GreenGrass.Services
@using GreenGrass.Data
@inject IAuthService AuthService
@inject IJSRuntime JSRuntime

<PageTitle>Home</PageTitle>

<div class="container-fluid">
    <div class="row">
        <div class="col-md-8">
            <h1>Your one stop for all lawncare and landscaping needs!</h1>
            <p class="lead">Welcome to GreenGrass - where your lawn dreams come true!</p>
            <p>We provide comprehensive lawn care and landscaping services to keep your property looking its best year-round.</p>
        </div>
        <div class="col-md-4">
            <div class="card">
                <div class="card-header">
                    <ul class="nav nav-tabs card-header-tabs" role="tablist">
                        <li class="nav-item" role="presentation">
                            <button class="nav-link @(isLoginTab ? "active" : "")" 
                                    type="button" 
                                    @onclick="() => SwitchTab(true)">
                                Login
                            </button>
                        </li>
                        <li class="nav-item" role="presentation">
                            <button class="nav-link @(!isLoginTab ? "active" : "")" 
                                    type="button" 
                                    @onclick="() => SwitchTab(false)">
                                Register
                            </button>
                        </li>
                    </ul>
                </div>
                <div class="card-body">
                    @if (isLoginTab)
                    {
                        <!-- Login Form -->
                        <EditForm Model="loginModel" OnValidSubmit="HandleLogin">
                            <DataAnnotationsValidator />
                            <ValidationSummary class="text-danger" />
                            
                            @if (!string.IsNullOrEmpty(loginErrorMessage))
                            {
                                <div class="alert alert-danger">@loginErrorMessage</div>
                            }

                            <div class="mb-3">
                                <label for="loginUsername" class="form-label">Username or Email</label>
                                <InputText id="loginUsername" 
                                          class="form-control" 
                                          @bind-Value="loginModel.UsernameOrEmail" 
                                          placeholder="Enter username or email" />
                                <ValidationMessage For="@(() => loginModel.UsernameOrEmail)" />
                            </div>

                            <div class="mb-3">
                                <label for="loginPassword" class="form-label">Password</label>
                                <InputText id="loginPassword" 
                                          type="password" 
                                          class="form-control" 
                                          @bind-Value="loginModel.Password" 
                                          placeholder="Enter password" />
                                <ValidationMessage For="@(() => loginModel.Password)" />
                            </div>

                            <button type="submit" class="btn btn-primary w-100" disabled="@isLoading">
                                @if (isLoading)
                                {
                                    <span class="spinner-border spinner-border-sm me-2"></span>
                                }
                                Login
                            </button>
                        </EditForm>
                    }
                    else
                    {
                        <!-- Register Form -->
                        <EditForm Model="registerModel" OnValidSubmit="HandleRegister">
                            <DataAnnotationsValidator />
                            <ValidationSummary class="text-danger" />
                            
                            @if (!string.IsNullOrEmpty(registerErrorMessage))
                            {
                                <div class="alert alert-danger">@registerErrorMessage</div>
                            }
                            
                            @if (!string.IsNullOrEmpty(registerSuccessMessage))
                            {
                                <div class="alert alert-success">@registerSuccessMessage</div>
                            }

                            <div class="row">
                                <div class="col-md-6 mb-3">
                                    <label for="firstName" class="form-label">First Name</label>
                                    <InputText id="firstName" 
                                              class="form-control" 
                                              @bind-Value="registerModel.FirstName" 
                                              placeholder="First name" />
                                    <ValidationMessage For="@(() => registerModel.FirstName)" />
                                </div>
                                <div class="col-md-6 mb-3">
                                    <label for="lastName" class="form-label">Last Name</label>
                                    <InputText id="lastName" 
                                              class="form-control" 
                                              @bind-Value="registerModel.LastName" 
                                              placeholder="Last name" />
                                    <ValidationMessage For="@(() => registerModel.LastName)" />
                                </div>
                            </div>

                            <div class="mb-3">
                                <label for="username" class="form-label">Username</label>
                                <InputText id="username" 
                                          class="form-control" 
                                          @bind-Value="registerModel.Username" 
                                          placeholder="Choose a username" />
                                <ValidationMessage For="@(() => registerModel.Username)" />
                            </div>

                            <div class="mb-3">
                                <label for="email" class="form-label">Email</label>
                                <InputText id="email" 
                                          type="email" 
                                          class="form-control" 
                                          @bind-Value="registerModel.Email" 
                                          placeholder="Enter email address" />
                                <ValidationMessage For="@(() => registerModel.Email)" />
                            </div>

                            <div class="mb-3">
                                <label for="password" class="form-label">Password</label>
                                <InputText id="password" 
                                          type="password" 
                                          class="form-control" 
                                          @bind-Value="registerModel.Password" 
                                          placeholder="Enter password" />
                                <ValidationMessage For="@(() => registerModel.Password)" />
                            </div>

                            <div class="mb-3">
                                <label for="confirmPassword" class="form-label">Confirm Password</label>
                                <InputText id="confirmPassword" 
                                          type="password" 
                                          class="form-control" 
                                          @bind-Value="registerModel.ConfirmPassword" 
                                          placeholder="Confirm password" />
                                <ValidationMessage For="@(() => registerModel.ConfirmPassword)" />
                            </div>

                            <button type="submit" class="btn btn-success w-100" disabled="@isLoading">
                                @if (isLoading)
                                {
                                    <span class="spinner-border spinner-border-sm me-2"></span>
                                }
                                Register
                            </button>
                        </EditForm>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private bool isLoginTab = true;
    private bool isLoading = false;
    private string loginErrorMessage = string.Empty;
    private string registerErrorMessage = string.Empty;
    private string registerSuccessMessage = string.Empty;

    private LoginModel loginModel = new();
    private RegisterModel registerModel = new();

    private void SwitchTab(bool isLogin)
    {
        isLoginTab = isLogin;
        loginErrorMessage = string.Empty;
        registerErrorMessage = string.Empty;
        registerSuccessMessage = string.Empty;
    }

    private async Task HandleLogin()
    {
        isLoading = true;
        loginErrorMessage = string.Empty;

        try
        {
            var user = await AuthService.AuthenticateAsync(loginModel.UsernameOrEmail, loginModel.Password);
            
            if (user != null)
            {
                await JSRuntime.InvokeVoidAsync("alert", $"Welcome back, {user.FirstName}!");
                // Here you would typically set authentication state and redirect
                // For now, we'll just show a success message
            }
            else
            {
                loginErrorMessage = "Invalid username/email or password.";
            }
        }
        catch (Exception ex)
        {
            loginErrorMessage = "An error occurred during login. Please try again.";
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task HandleRegister()
    {
        isLoading = true;
        registerErrorMessage = string.Empty;
        registerSuccessMessage = string.Empty;

        try
        {
            if (registerModel.Password != registerModel.ConfirmPassword)
            {
                registerErrorMessage = "Passwords do not match.";
                return;
            }

            var user = await AuthService.RegisterAsync(
                registerModel.Username,
                registerModel.Email,
                registerModel.Password,
                registerModel.FirstName,
                registerModel.LastName
            );

            if (user != null)
            {
                registerSuccessMessage = "Registration successful! You can now log in.";
                registerModel = new(); // Clear form
                // Optionally switch to login tab
                SwitchTab(true);
            }
            else
            {
                registerErrorMessage = "Username or email already exists.";
            }
        }
        catch (Exception ex)
        {
            registerErrorMessage = "An error occurred during registration. Please try again.";
        }
        finally
        {
            isLoading = false;
        }
    }

    public class LoginModel
    {
        [Required(ErrorMessage = "Username or email is required")]
        public string UsernameOrEmail { get; set; } = string.Empty;

        [Required(ErrorMessage = "Password is required")]
        public string Password { get; set; } = string.Empty;
    }

    public class RegisterModel
    {
        [Required(ErrorMessage = "First name is required")]
        public string FirstName { get; set; } = string.Empty;

        [Required(ErrorMessage = "Last name is required")]
        public string LastName { get; set; } = string.Empty;

        [Required(ErrorMessage = "Username is required")]
        [StringLength(50, MinimumLength = 3, ErrorMessage = "Username must be between 3 and 50 characters")]
        public string Username { get; set; } = string.Empty;

        [Required(ErrorMessage = "Email is required")]
        [EmailAddress(ErrorMessage = "Invalid email format")]
        public string Email { get; set; } = string.Empty;

        [Required(ErrorMessage = "Password is required")]
        [StringLength(100, MinimumLength = 6, ErrorMessage = "Password must be at least 6 characters long")]
        public string Password { get; set; } = string.Empty;

        [Required(ErrorMessage = "Please confirm your password")]
        public string ConfirmPassword { get; set; } = string.Empty;
    }
}