@* GreenGrass/Components/Pages/Home.razor *@
@page "/"
@using System.ComponentModel.DataAnnotations
@using GreenGrass.Services
@using GreenGrass.Models
@using Microsoft.AspNetCore.Components
@inject IAuthService AuthService
@inject IJSRuntime JSRuntime

<PageTitle>Login</PageTitle>

<div class="container-fluid">
    <div class="row vh-100 justify-content-center align-items-center">
        <div class="col-12 col-md-6 col-lg-4">
            <div class="card shadow-sm">
                <div class="card-header text-center">
                    <h4 class="mb-0">GreenGrass Login</h4>
                </div>
                <div class="card-body">
                    <EditForm Model="loginModel" OnValidSubmit="HandleLogin" FormName="LoginForm">
                        <DataAnnotationsValidator />
                        
                        @if (!string.IsNullOrEmpty(errorMessage))
                        {
                            <div class="alert alert-danger">@errorMessage</div>
                        }
                        
                        @if (!string.IsNullOrEmpty(successMessage))
                        {
                            <div class="alert alert-success">@successMessage</div>
                        }

                        <div class="mb-3">
                            <label for="email" class="form-label">Email</label>
                            <InputText id="email" type="email" class="form-control" @bind-Value="loginModel.Email" placeholder="Enter your email" />
                            <ValidationMessage For="@(() => loginModel.Email)" />
                        </div>

                        <div class="mb-3">
                            <label for="password" class="form-label">Password</label>
                            <InputText id="password" type="password" class="form-control" @bind-Value="loginModel.Password" placeholder="Enter your password" />
                            <ValidationMessage For="@(() => loginModel.Password)" />
                        </div>

                        <button type="submit" class="btn btn-primary w-100" disabled="@isLoading">
                            @if (isLoading)
                            {
                                <span class="spinner-border spinner-border-sm me-2"></span>
                            }
                            Login or Create Account
                        </button>
                    </EditForm>
                    
                    <div class="mt-3 text-center">
                        <small class="text-muted">
                            No account? We'll create one for you automatically.
                        </small>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private bool isLoading = false;
    private string errorMessage = string.Empty;
    private string successMessage = string.Empty;

    [Parameter]
    [SupplyParameterFromForm]
    public LoginModel loginModel { get; set; } = new();

    private async Task HandleLogin()
    {
        isLoading = true;
        errorMessage = string.Empty;
        successMessage = string.Empty;

        try
        {
            var result = await AuthService.LoginOrCreateAsync(loginModel.Email, loginModel.Password);
            
            switch (result.Status)
            {
                case AuthStatus.Login:
                    successMessage = "Login successful! Welcome back.";
                    break;
                case AuthStatus.Registration:
                    successMessage = "Account created! Welcome to GreenGrass.";
                    break;
                case AuthStatus.Failure:
                    errorMessage = "Invalid password. Please try again.";
                    break;
            }
        }
        catch (Exception)
        {
            errorMessage = "An error occurred. Please try again later.";
        }
        finally
        {
            isLoading = false;
        }
    }

    public class LoginModel
    {
        [Required(ErrorMessage = "Email is required")]
        [EmailAddress(ErrorMessage = "Invalid email format")]
        public string Email { get; set; } = string.Empty;

        [Required(ErrorMessage = "Password is required")]
        [StringLength(100, MinimumLength = 6, ErrorMessage = "Password must be at least 6 characters long")]
        public string Password { get; set; } = string.Empty;
    }
}